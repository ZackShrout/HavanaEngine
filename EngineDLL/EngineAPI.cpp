//******************************************
//Havana Engine API for use in Havana Editor
//******************************************
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif // !WIN32_LEAN_AND_MEAN

#include <Windows.h>
#include <atlsafe.h>
#include "Common.h"
#include "..\Engine\Components\Script.h"
#include "..\Graphics\Renderer.h"
#include "..\Platforms\PlatformTypes.h"
#include "..\Platforms\Platform.h"

using namespace Havana;

namespace
{
	HMODULE gameCodeDll{ nullptr };
	using get_script_creator = Havana::Script::Detail::script_creator(*)(size_t);
	get_script_creator GetScriptCreatorDll{ nullptr };
	using get_script_names = LPSAFEARRAY(*)(void);
	get_script_names GetScriptNamesDll{ nullptr };
	Utils::vector<Graphics::RenderSurface> surfaces;
} // anonymous namespace

/// <summary>
/// Load the .dll file generated by the scripts into the Havana Editor
/// for use.
/// </summary>
/// <param name="dllPath">Path of the .dll file.</param>
/// <returns>1 if successful, 0 if not.</returns>
EDITOR_INTERFACE u32 LoadGameCodeDll(const char* dllPath)
{
	if (gameCodeDll) return FALSE; // make sure it's not already loaded

	gameCodeDll = LoadLibraryA(dllPath);
	assert(gameCodeDll);

	GetScriptCreatorDll = (get_script_creator)GetProcAddress(gameCodeDll, "GetScriptCreatorDll");
	GetScriptNamesDll = (get_script_names)GetProcAddress(gameCodeDll, "GetScriptNamesDll");

	return (gameCodeDll && GetScriptCreatorDll && GetScriptNamesDll) ? TRUE : FALSE;
}

/// <summary>
/// Unload the .dll file generated by the scripts from the Havana Editor
/// </summary>
/// <param name="dllPath">Path of the .dll file.</param>
/// <returns>1 if successful, 0 if not.</returns>
EDITOR_INTERFACE u32 UnloadGameCodeDll()
{
	if (!gameCodeDll) return FALSE; // make sure it's already loaded
	assert(gameCodeDll);
	
	int result{ FreeLibrary(gameCodeDll) };
	assert(result);
	gameCodeDll = nullptr;
	
	return TRUE;
}

/// <summary>
/// Get a script creator function pointer for use in the Havana Editor
/// </summary>
/// <param name="name">Name of the script to get.</param>
/// <returns>Function pointer to script.</returns>
EDITOR_INTERFACE Script::Detail::script_creator GetScriptCreator(const char* name)
{
	return (gameCodeDll && GetScriptCreatorDll) ? GetScriptCreatorDll(Script::Detail::string_hash()(name)) : nullptr;
}

/// <summary>
/// Get the array of script names for use in the Havana Editor
/// </summary>
/// <returns>Array of script names.</returns>
EDITOR_INTERFACE LPSAFEARRAY GetScriptNames()
{
	return (gameCodeDll && GetScriptNamesDll) ? GetScriptNamesDll() : nullptr;
}

/// <summary>
/// Create a window to render graphics to in the editor.
/// </summary>
/// <param name="host"> - Host for the window.</param>
/// <param name="width"> - Width of the window.</param>
/// <param name="height"> - Height of the window.</param>
/// <returns>ID of the window.</returns>
EDITOR_INTERFACE u32 CreateRenderSurface(HWND host, s32 width, s32 height)
{
	assert(host);
	Platform::WindowInitInfo info{ nullptr, host, nullptr, 0, 0, width, height };
	Graphics::RenderSurface surface{ Platform::MakeWindow(&info), {} };
	assert(surface.window.IsValid());
	surfaces.emplace_back(surface);
	return (u32)(surfaces.size() - 1);
}

/// <summary>
/// Remove a graphics rendering window from the editor.
/// </summary>
/// <param name="id"> - ID of the window to remove.</param>
EDITOR_INTERFACE void RemoveRenderSurface(u32 id)
{
	assert(id < surfaces.size());
	Platform::RemoveWindow(surfaces[id].window.GetID());
}

EDITOR_INTERFACE HWND GetWindowHandle(u32 id)
{
	assert(id < surfaces.size());
	return (HWND)(surfaces[id].window.Handle());
}

EDITOR_INTERFACE void ResizeRenderSurface(u32 id)
{
	assert(id < surfaces.size());
	surfaces[id].window.Resize(0, 0);
}